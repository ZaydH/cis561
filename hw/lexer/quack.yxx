/* Parser to convert "C" assignments to lisp using Bison in C. */
/* Demonstrates Bison C++ interface with %skeleton "lalr1.cc" */
/* Compile: bison -d flexexample9.yxx */

%skeleton "lalr1.cc"
%require  "3.0"

/* The following section "code requires" finds its way into
 * quack.tab.hxx, so definitions and declarations in this block
 * can be imported into the lexer.
 */
%code requires{
  namespace yy {
    class Lexer;  /* Generated by reflex with namespace=yy lexer=Lexer */
  }

  #include "ASTNode.h"       // Abstract syntax tree
  #include "QClass.h"  // Quack Class
}

%locations
%define parse.trace

%parse-param { yy::Lexer& lexer }  /* Construct parser object with lexer */
%parse-param { AST::ASTNode** root }  /* To pass AST root back to driver */

%code{
    #include "lex.yy.h"
    #undef yylex
    #define yylex lexer.yylex  /* Within bison's parse() we should invoke lexer.yylex(), not the global yylex() */
    void dump(AST::ASTNode* n);

}

%union {
    int   num;
    bool  boolean;
    char* str;
    AST::ASTNode* node;
    // Methods used for classes and methods so need explicit types
    AST::QuackClass* q_class;
    AST::QuackClass::Container* classes;
    AST::QuackClass::Method* method;
    AST::QuackClass::Method::Container* methods;
    // block needs a more explicit type to use the 'append' method
    AST::Block* block;
}

// The following token values are actually used
%token <str> IDENT
%token <str> STRING
%token <num> NUMBER
%token <boolean> BOOLEAN

// The following tokens don't need values
%token LINE_COMMENT_START
%token CLASS EXTENDS
%token DEF RETURN
%token IF ELIF ELSE
%token WHILE

%token TYPECASE
%token NOTHING NONE
%token COLON SEMICLN
%token AND OR NOT
%token LEQ GEQ GT LT EQ
%token PLUS MINUS TIMES DIV GETS
%token LPAREN RPAREN
%token LCURLY RCURLY

// Abstract syntax tree nodes
%type <node> expr leaf program stmt assignment
%type <block> block if_alternatives
%type <node> ifstmt

%type <str> method_name return_type class_name super_class
// ToDo Fix parameters
%type <str> parameters
%type <q_class> q_class class_hdr
%type <classes> classes
%type <method> method
%type <methods> methods


// Precedence.  We are using an ambiguous expression grammar
// for compactness.  We declare operator precedence from lowest
// to highest, with associativity, e.g., MINUS is left_ associative
// so a-b-c is (a-b)-c and not a-(b-c).
%left OR AND
%left MINUS PLUS
%left TIMES DIV

%%

/* Root of the grammar is "program".  A program
 * is a non-empty sequence of assignments or expressions.
 */
program: classes block  { *root = $2; } ;

/* Definition for the class structures */
classes: classes q_class { $1->emplace($2->name_, $2); $$=$1; }
         | /* no classes */ { $$ = new AST::QuackClass::Container(); }
         ;
q_class: CLASS class_hdr LCURLY block methods RCURLY
       { $2->add_constructor($4); $2->add_methods($5); $$=$2; }
       ;
parameters: // ToDo
            { $$ = nullptr; }
          ;
class_hdr: class_name LPAREN parameters RPAREN super_class
            { $$ = new AST::QuackClass($1, $5); }
         ;
class_name: IDENT { $$ = $1; } ;
super_class: EXTENDS class_name { $$ = $2; }
           | /* Inherits Obj */ { $$ = nullptr; }
           ;

methods: methods method { $1->emplace($2->name_, $2); $$=$1; }
       | /* no method */ { $$ = new AST::QuackClass::Method::Container(); }
       ;
method: DEF method_name LPAREN parameters RPAREN COLON return_type LCURLY block RCURLY
           { $$ = new AST::QuackClass::Method($2, $7, $9); }
      ;
method_name: IDENT { $$ = $1; } ;
return_type : IDENT { $$ = $1; } ;

/* Standard recursive definition for a non-empty sequence. */
block: block stmt { $1->append($2); $$ = $1; }
     | stmt       { $$ = new AST::Block(); $$->append($1); }
     ;

stmt: assignment SEMICLN { $$ = $1; }
    | expr SEMICLN { $$ = $1; }
    | ifstmt { $$ = $1; }
    | /* empty */ { $$ = new AST::Block(); }
    ;

ifstmt:  IF LPAREN expr RPAREN LCURLY block RCURLY if_alternatives
 {    $$ = new AST::If(*$3, *$6, *$8);  } ;

if_alternatives:   /* empty */  { $$ = new AST::Block(); };
if_alternatives:   ELSE LCURLY block RCURLY   { $$ = $3; };
if_alternatives:   ELIF LPAREN expr RPAREN LCURLY block RCURLY if_alternatives
 {  $$ = new AST::Block();
    $$->append(new AST::If(*$3, *$6, *$8));
 };



assignment: IDENT GETS expr {
        AST::Ident* lhs = new AST::Ident($1);
        AST::ASTNode*  rhs =  $3;
        $$ = new AST::Assign(*lhs, *rhs);
        };

expr : expr PLUS expr  { $$ = new AST::Plus( *$1, *$3 ); dump($$); }
     | expr MINUS expr { $$ = new AST::Minus( *$1, *$3 ); dump($$); }
     | expr TIMES expr { $$ = new AST::Times( *$1, *$3 ); dump($$); }
     | expr DIV expr   { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | expr AND expr   { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | expr OR expr    { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | expr GT expr    { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | expr LT expr    { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | expr LEQ expr   { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | expr GEQ expr   { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | expr EQ expr    { $$ = new AST::Div( *$1, *$3 ); dump($$); }
     | LPAREN expr RPAREN { $$ = $2; }
     | leaf            { $$ = $1; }
     | error  leaf     { $$ = $2; }
     ;

leaf : IDENT  { $$ = new AST::Ident( std::string($1)); dump($$); }
     | NUMBER { $$ = new AST::IntConst( $1 );  dump($$); }
     ;


%%
#include "Messages.h"

void yy::parser::error(const location_type& loc, const std::string& msg)
{
  report::error_at(loc, msg);
}

void dump(AST::ASTNode* n) {
    // std::cout << "*** Building: " << n->str() << std::endl;
}
